{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","onChange","e","target","value","rows","showAlert","document","getElementById","style","color","split","length","defaultProps","App","setMode","setAlert","message","body","classList","add","setInterval","remove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cd33ff72.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&\r\n        <div>\r\n              <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}! </strong> {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" href=\"/about\">About</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark': 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Navbar\",\r\n}\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = () =>{\r\n        // console.log(\"UpperCase was clicked\");\r\n        setText(text.toUpperCase())\r\n        props.showAlert(\"Coverted to uppercase\", 'success');\r\n    }\r\n    const handleLowClick = () =>{\r\n        // console.log(\"UpperCase was clicked\");\r\n        setText(text.toLowerCase())\r\n        props.showAlert(\"Coverted to lowercase\", 'success');\r\n    }\r\n    const handlOnChange = (e) =>{\r\n        // console.log(\"On change\");\r\n        setText(e.target.value)\r\n\r\n    }\r\n\r\n    const handleChangeColor = (e)=>{\r\n        document.getElementById('myBox').style.color = e.target.value;\r\n    }\r\n\r\n    \r\n    return (\r\n        <>\r\n        <div className='container my-3'>\r\n            <h2 className='my-3'>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" onChange={handlOnChange} id=\"myBox\" rows=\"5\" value={text}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Text to uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Text to lower</button>\r\n            <input type=\"color\" className=\"form-control-color\" onChange={handleChangeColor} />\r\n\r\n        </div>\r\n        <div className=\"container my-2\">\r\n            <h3 style={{color: \"red\"}}>Your text summary</h3>\r\n            <p>{text.split(' ').length} words, {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read.</p>\r\n            <h4>Preview</h4>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n// import React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light') //check whether dark mode is enable or not.\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    // setTimeout(() => {\n    //   setAlert(null)\n    // }, 2000);\n\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.classList.add('bg-secondary');\n      showAlert(\"Dark mode has been enabled\", 'success');\n      document.title = 'Textutils - Dark Mode';\n      setInterval(() => {\n        document.title = 'Textutils - is Amazing';\n\n      }, 2000);\n    } else {\n      setMode('light');\n      document.body.classList.remove('bg-secondary');\n      showAlert(\"light mode has been enabled\", 'success');\n      document.title = 'Textutils - Light Mode';\n    }\n  }\n  return (\n    <>\n      {/* <Router>\n        <Routes>\n        <Route exact path=\"/\" element={} />\n        <Route exact path=\"/about\" element={<About />} />\n        </Routes>\n      </Router> */}\n\n      <Navbar mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" />\n      {/* <About /> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}